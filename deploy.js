const ethers = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();

async function main() {
    const provider = new ethers.providers.JsonRpcBatchProvider(process.env.RPC_URL);
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf-8");
    const bin = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf-8");

    const contractFactory = new ethers.ContractFactory(abi, bin, wallet);
    console.log("Deploying plase wait...");
    const contract = await contractFactory.deploy();
    const deploymentReciept = await contract.deployTransaction.wait(1);
    
    // console.log(contract);
    // console.log (deploymentReciept);
    // console.log (contract.deployTransaction);

    // console.log ("Deploy with transaction data:");
    // const nonce = await wallet.getTransactionCount();
    // const tx = {
    //     nonce: nonce,
    //     gasPrice: 20000000000,
    //     gasLimit: 1000000,
    //     to: null,
    //     value: 0,
    //     data: "608060405234801561001057600080fd5b506107a0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec1146100675780636057361d146100855780636f760f41146100a157806380c9419e146100bd5780638381f58a146100ee57806392fa9da31461010c575b600080fd5b61006f61013c565b60405161007c9190610589565b60405180910390f35b61009f600480360381019061009a919061049c565b610145565b005b6100bb60048036038101906100b69190610440565b61014f565b005b6100d760048036038101906100d2919061049c565b6101df565b6040516100e5929190610559565b60405180910390f35b6100f661029b565b6040516101039190610589565b60405180910390f35b610126600480360381019061012191906103f7565b6102a1565b6040516101339190610589565b60405180910390f35b60008054905090565b8060008190555050565b6001604051806040016040528084815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190805190602001906101ab9291906102cf565b50602082015181600101555050806002836040516101c99190610542565b9081526020016040518091039020819055505050565b600181815481106101ef57600080fd5b90600052602060002090600202016000915090508060000180546102129061066d565b80601f016020809104026020016040519081016040528092919081815260200182805461023e9061066d565b801561028b5780601f106102605761010080835404028352916020019161028b565b820191906000526020600020905b81548152906001019060200180831161026e57829003601f168201915b5050505050908060010154905082565b60005481565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b8280546102db9061066d565b90600052602060002090601f0160209004810192826102fd5760008555610344565b82601f1061031657805160ff1916838001178555610344565b82800160010185558215610344579182015b82811115610343578251825591602001919060010190610328565b5b5090506103519190610355565b5090565b5b8082111561036e576000816000905550600101610356565b5090565b6000610385610380846105c9565b6105a4565b9050828152602081018484840111156103a1576103a0610733565b5b6103ac84828561062b565b509392505050565b600082601f8301126103c9576103c861072e565b5b81356103d9848260208601610372565b91505092915050565b6000813590506103f181610753565b92915050565b60006020828403121561040d5761040c61073d565b5b600082013567ffffffffffffffff81111561042b5761042a610738565b5b610437848285016103b4565b91505092915050565b600080604083850312156104575761045661073d565b5b600083013567ffffffffffffffff81111561047557610474610738565b5b610481858286016103b4565b9250506020610492858286016103e2565b9150509250929050565b6000602082840312156104b2576104b161073d565b5b60006104c0848285016103e2565b91505092915050565b60006104d4826105fa565b6104de8185610605565b93506104ee81856020860161063a565b6104f781610742565b840191505092915050565b600061050d826105fa565b6105178185610616565b935061052781856020860161063a565b80840191505092915050565b61053c81610621565b82525050565b600061054e8284610502565b915081905092915050565b6000604082019050818103600083015261057381856104c9565b90506105826020830184610533565b9392505050565b600060208201905061059e6000830184610533565b92915050565b60006105ae6105bf565b90506105ba828261069f565b919050565b6000604051905090565b600067ffffffffffffffff8211156105e4576105e36106ff565b5b6105ed82610742565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561065857808201518184015260208101905061063d565b83811115610667576000848401525b50505050565b6000600282049050600182168061068557607f821691505b60208210811415610699576106986106d0565b5b50919050565b6106a882610742565b810181811067ffffffffffffffff821117156106c7576106c66106ff565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61075c81610621565b811461076757600080fd5b5056fea2646970667358221220aff1cef5a6e832310c5af4f93b04fec5fabf358ca92bec3b0864c579f8906bba64736f6c63430008070033",
    //     chainID: 1337,
    // };
    // const sentTxResponse = await wallet.sendTransaction(tx);
    // await sentTxResponse.wait(1);
    // console.log (sentTxResponse);

    // Interaction with the smart contract -- using the store & retirieve function
        const txResponse = await contract.store("987654321987654321");
        const txReciept = await txResponse.wait(1);
        const currentNumber = await contract.retrieve();
        console.log (currentNumber);
        console.log (currentNumber.toString());
        console.log (`Current Number: ${currentNumber.toString()}`);
    
    // -- using addPerson function
        const addPersonResponse = await contract.addPerson("Khatami", "987654321");
        const addPersonReceipt = await addPersonResponse.wait(1);
        const currentPerson = await contract.list("0");
        console.log (`Currnet Person is: ${currentPerson}`);
    
    // -- using the map
        const personNumber = await contract.nameToNum("Khatami");
        console.log (`Person's favorite number: ${personNumber}`);
    
    // Compiling StorageFactory.sol
        const abiSF = fs.readFileSync("./StorageFactory_sol_StorageFactory.abi", "utf-8");
        const binSF = fs.readFileSync("./StorageFactory_sol_StorageFactory.bin", "utf-8");

        const contractFactorySF = new ethers.ContractFactory(abiSF, binSF, wallet);
        console.log ("Deploying Please wait...");
        const contractSF = await contractFactorySF.deploy();
        await contractSF.deployTransaction.wait(1);
    
    // Interacting with StorageFactory.sol --createSSArray function
        const createSSArraySFResponse = await contractSF.createSSArray();
        const createSSArraySFReceipt = await createSSArraySFResponse.wait(1);
        // console.log (createSSArraySFReceipt);
    
    // --ssArray
        const ssArraySF = await contractSF.ssArray("0");
        console.log (`Contract address: ${ssArraySF}`);

    // --sfStore
        const sfStoreResponse = await contractSF.sfStore("0", "1234567");
        const sfStoreReceipt = await sfStoreResponse.wait(1);
        // console.log (sfStoreReceipt);

    // --sfGet
        const sfNum = await contractSF.sfGet("0");
        console.log (`StorageFactory Number: ${sfNum}`);



}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });